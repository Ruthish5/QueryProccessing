import random
def damerau_levenshtein(s1, s2):
    len1, len2 = len(s1), len(s2)
    dp = [[0] * (len2 + 1) for _ in range(len1 + 1)]
    for i in range(len1 + 1):
        dp[i][0] = i
    for j in range(len2 + 1):
        dp[0][j] = j
    for i in range(1, len1 + 1):
        for j in range(1, len2 + 1):
            cost = 0 if s1[i - 1] == s2[j - 1] else 1
            dp[i][j] = min(
                dp[i - 1][j] + 1,
                dp[i][j - 1] + 1,
                dp[i - 1][j - 1] + cost
            )
            if i > 1 and j > 1 and s1[i - 1] == s2[j - 2] and s1[i - 2] == s2[j - 1]:
                dp[i][j] = min(dp[i][j], dp[i - 2][j - 2] + 1)
    return dp[len1][len2]
def initialize_population(target, pop_size):
    population = []
    for _ in range(pop_size):
        individual = ''.join(random.choices("ACGT", k=len(target)))
        population.append(individual)
    return population
def fitness(individual, target):
    distance = damerau_levenshtein(individual, target)
    return 1 / (distance + 1)
def crossover(parent1, parent2):
    point = random.randint(1, len(parent1) - 1)
    child = parent1[:point] + parent2[point:]
    return child
def mutate(individual):
    if random.random() < 0.2:
        mutation_type = random.choice(["substitute", "transpose"])
        if mutation_type == "substitute":
