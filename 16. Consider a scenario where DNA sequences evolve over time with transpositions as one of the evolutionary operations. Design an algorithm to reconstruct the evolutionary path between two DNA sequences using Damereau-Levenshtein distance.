def damerau_levenshtein_matrix(s1, s2):
    len1, len2 = len(s1), len(s2)
    dp = [[0] * (len2 + 1) for _ in range(len1 + 1)]
    for i in range(len1 + 1):
        dp[i][0] = i
    for j in range(len2 + 1):
        dp[0][j] = j
    for i in range(1, len1 + 1):
        for j in range(1, len2 + 1):
            cost = 0 if s1[i - 1] == s2[j - 1] else 1
            dp[i][j] = min(
                dp[i - 1][j] + 1,
                dp[i][j - 1] + 1,
                dp[i - 1][j - 1] + cost
            )
            if i > 1 and j > 1 and s1[i - 1] == s2[j - 2] and s1[i - 2] == s2[j - 1]:
                dp[i][j] = min(dp[i][j], dp[i - 2][j - 2] + 1)
    
    return dp
def reconstruct_path(dp, s1, s2):
    i, j = len(s1), len(s2)
    operations = []
    while i > 0 or j > 0:
        current_cost = dp[i][j]
        if i > 0 and j > 0 and s1[i - 1] == s2[j - 1]:
            i -= 1
            j -= 1
            continue
        if i > 0 and dp[i][j] == dp[i - 1][j] + 1:
            operations.append(f"Delete {s1[i - 1]} at position {i - 1}")
            i -= 1
            continue
        if j > 0 and dp[i][j] == dp[i][j - 1] + 1:
            operations.append(f"Insert {s2[j - 1]} at position {j - 1}")
            j -= 1
            continue
