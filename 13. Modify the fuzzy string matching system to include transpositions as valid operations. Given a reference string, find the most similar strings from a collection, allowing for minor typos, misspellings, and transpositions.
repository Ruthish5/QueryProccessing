def damerau_levenshtein_distance(s1, s2):
    len1, len2 = len(s1), len(s2)
    dp = [[0] * (len2 + 1) for _ in range(len1 + 1)]
    for i in range(len1 + 1):
        dp[i][0] = i
    for j in range(len2 + 1):
        dp[0][j] = j
    for i in range(1, len1 + 1):
        for j in range(1, len2 + 1):
            cost = 0 if s1[i - 1] == s2[j - 1] else 1
            dp[i][j] = min(
                dp[i - 1][j] + 1,
                dp[i][j - 1] + 1,
                dp[i - 1][j - 1] + cost
            )
            if i > 1 and j > 1 and s1[i - 1] == s2[j - 2] and s1[i - 2] == s2[j - 1]:
                dp[i][j] = min(dp[i][j], dp[i - 2][j - 2] + 1)
    return dp[len1][len2]
def find_most_similar_strings(reference, candidates, max_distance=2):
    similar_strings = []
    for candidate in candidates:
        distance = damerau_levenshtein_distance(reference, candidate)
        if distance <= max_distance:
            similar_strings.append((candidate, distance))
    similar_strings.sort(key=lambda x: x[1])
    return similar_strings
reference = "autocorrect"
candidates = ["autocorect", "autocorret", "autocorrects", "autocoerct", "autocorec", "autocore"]
max_distance = 2
results = find_most_similar_strings(reference, candidates, max_distance)
print(f"Reference: {reference}")
print("Most similar strings:")
for candidate, distance in results:
    print(f"  - {candidate} (Distance: {distance})")
