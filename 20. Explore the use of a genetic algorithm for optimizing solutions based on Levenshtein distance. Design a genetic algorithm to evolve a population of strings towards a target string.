import random
import numpy as np
def levenshtein_distance(str1, str2):
    len_str1, len_str2 = len(str1), len(str2)
    dp = np.zeros((len_str1 + 1, len_str2 + 1))
    for i in range(len_str1 + 1):
        dp[i][0] = i
    for j in range(len_str2 + 1):
        dp[0][j] = j
    for i in range(1, len_str1 + 1):
        for j in range(1, len_str2 + 1):
            cost = 0 if str1[i - 1] == str2[j - 1] else 1
            dp[i][j] = min(dp[i - 1][j] + 1,
                           dp[i][j - 1] + 1,
                           dp[i - 1][j - 1] + cost)
    return dp[len_str1][len_str2]
def generate_random_string(length):
    return ''.join(random.choice('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz ') for _ in range(length))
def fitness_function(candidate, target):
    return 1 / (levenshtein_distance(candidate, target) + 1)
def crossover(parent1, parent2):
    point = random.randint(1, len(parent1) - 1)
    child1 = parent1[:point] + parent2[point:]
    child2 = parent2[:point] + parent1[point:]
    return child1, child2
def mutate(string, mutation_rate=0.01):
    mutated_string = list(string)
    for i in range(len(mutated_string)):
        if random.random() < mutation_rate:
            mutated_string[i] = random.choice('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz ')
    return ''.join(mutated_string)
def genetic_algorithm(target, population_size=100, generations=1000, mutation_rate=0.01):
    population = [generate_random_string(len(target)) for _ in range(population_size)]
    best_solution = None
    best_fitness = 0
    for generation in range(generations):
